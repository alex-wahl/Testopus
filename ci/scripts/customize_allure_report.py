#!/usr/bin/env python3
"""Allure Report Customization Script.

This script customizes the Allure report generated by Allure commandline.
Following CI/CD best practices for report generation and customization.

Features:
1. Date format standardization (DD-MM-YYYY)
2. Branch information inclusion
3. Clean HTML/CSS modifications
4. No JavaScript redirects or manipulations
5. Performance optimization

Usage:
    python customize_allure_report.py [path_to_report_dir]
    python customize_allure_report.py [path_to_report_dir] --dummy
"""

import os
import sys
import re
import glob
import json
import time
import logging
import subprocess
from datetime import datetime
from pathlib import Path

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('allure-customizer')


def get_current_date_formatted() -> str:
    """Get current date in DD-MM-YYYY format.
    
    Returns:
        str: Current date formatted as DD-MM-YYYY.
    """
    return datetime.now().strftime("%d-%m-%Y")


def create_nojekyll_file(report_dir: str) -> None:
    """Create .nojekyll file to prevent GitHub Pages from using Jekyll.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    with open(os.path.join(report_dir, ".nojekyll"), "w") as f:
        pass
    
    logger.info("Created .nojekyll file")


def add_branch_info(report_dir: str) -> None:
    """Add git branch information to environment properties.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    env_file = os.path.join(report_dir, "environment.properties")
    
    # Try to get branch name from environment variables
    branch = os.environ.get('GITHUB_HEAD_REF', '')  # For pull requests
    if not branch:
        ref = os.environ.get('GITHUB_REF', '')      # For direct pushes
        if ref.startswith('refs/heads/'):
            branch = ref.replace('refs/heads/', '')
    
    if not branch:
        try:
            # Try to get from git command as fallback
            branch = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD'], 
                                          stderr=subprocess.DEVNULL).decode('utf-8').strip()
        except (subprocess.SubprocessError, FileNotFoundError):
            branch = 'unknown'
    
    # Read existing environment properties
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
    else:
        lines = []
    
    # Check if Branch property already exists
    branch_exists = False
    for i, line in enumerate(lines):
        if line.startswith('Branch='):
            lines[i] = f'Branch={branch}\n'
            branch_exists = True
            break
    
    # Add branch if it doesn't exist
    if not branch_exists:
        lines.append(f'Branch={branch}\n')
    
    # Write updated environment properties
    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    logger.info(f"Added branch information: {branch}")


def fix_html_title_tags(report_dir: str) -> None:
    """Fix date format in HTML title tags.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    today = get_current_date_formatted()
    
    html_files = glob.glob(os.path.join(report_dir, "**", "*.html"), recursive=True)
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Fix HTML title tag
            new_content = re.sub(
                r'<title>(?:Allure Report|ALLURE REPORT)(?:\s+\d{1,2}[-/]\d{1,2}[-/]\d{4})?</title>', 
                f'<title>ALLURE REPORT {today}</title>', 
                content
            )
            
            # Fix visible title in the HTML content - using simple string replacement
            pattern = 'ALLURE REPORT'
            report_with_date_pattern = re.compile(r'ALLURE\s+REPORT\s+\d{1,2}[-/]\d{1,2}[-/]\d{4}', re.IGNORECASE)
            
            # First try finding pattern with date
            date_matches = report_with_date_pattern.findall(new_content)
            for match in date_matches:
                new_content = new_content.replace(match, f'ALLURE REPORT {today}')
            
            if new_content != content:
                with open(html_file, 'w', encoding='utf-8') as f:
                    f.write(new_content)
        except Exception as e:
            logger.warning(f"Error fixing title in {html_file}: {e}")
    
    logger.info("Fixed date format in HTML title tags")


def fix_js_date_formats(report_dir: str) -> None:
    """Fix date formats in JavaScript files.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    today = get_current_date_formatted()
    
    js_files = glob.glob(os.path.join(report_dir, "**", "*.js"), recursive=True)
    fixed_count = 0
    
    for js_file in js_files:
        try:
            with open(js_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            modified = False
            
            # Replace date strings directly using regex pattern matching and direct string replacement
            date_patterns = [
                r'ALLURE\s+REPORT\s+\d{1,2}/\d{1,2}/\d{4}',
                r'Allure\s+Report\s+\d{1,2}/\d{1,2}/\d{4}',
                r'ALLURE\s+REPORT\s+\d{1,2}-\d{1,2}-\d{4}',
                r'Allure\s+Report\s+\d{1,2}-\d{1,2}-\d{4}'
            ]
            
            for pattern in date_patterns:
                regex = re.compile(pattern, re.IGNORECASE)
                matches = regex.findall(content)
                for match in matches:
                    content = content.replace(match, f'ALLURE REPORT {today}')
                    modified = True
            
            # Also look for title fields in JSON-like structures
            title_patterns = [
                r'"title"\s*:\s*"[^"]*\d{1,2}/\d{1,2}/\d{4}[^"]*"',
                r'"title"\s*:\s*"[^"]*\d{1,2}-\d{1,2}-\d{4}[^"]*"'
            ]
            
            for pattern in title_patterns:
                regex = re.compile(pattern, re.IGNORECASE)
                matches = regex.findall(content)
                for match in matches:
                    # Extract just the part between quotes after title:
                    content = content.replace(match, f'"title":"ALLURE REPORT {today}"')
                    modified = True
            
            if modified:
                with open(js_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_count += 1
        except Exception as e:
            logger.warning(f"Error fixing JS date formats in {js_file}: {e}")
    
    logger.info(f"Fixed date formats in {fixed_count} JavaScript files")


def fix_json_timestamps(report_dir: str) -> None:
    """Fix timestamp format in JSON files.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    json_files = glob.glob(os.path.join(report_dir, "**", "*.json"), recursive=True)
    fixed_count = 0
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Fix ISO timestamps to DD-MM-YYYY HH:MM:SS
            pattern = r'(\d{4}).(\d{2}).(\d{2})T(\d{2}):(\d{2}):(\d{2})'
            replacement = r'\3-\2-\1 \4:\5:\6'
            
            new_content = re.sub(pattern, replacement, content)
            
            if new_content != content:
                with open(json_file, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                fixed_count += 1
        except Exception as e:
            logger.warning(f"Error fixing JSON timestamp in {json_file}: {e}")
    
    logger.info(f"Fixed timestamps in {fixed_count} JSON files")


def add_cache_control(report_dir: str) -> None:
    """Add cache control headers and meta tags.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    # Create _headers file for GitHub Pages
    headers_content = """/*
  Cache-Control: no-cache, no-store, must-revalidate
  Pragma: no-cache
  Expires: 0
"""
    with open(os.path.join(report_dir, "_headers"), "w") as f:
        f.write(headers_content)
    
    # Add cache control meta tags to HTML files
    html_files = glob.glob(os.path.join(report_dir, "**", "*.html"), recursive=True)
    fixed_count = 0
    
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Check if cache meta tags already exist
            if '<meta http-equiv="Cache-Control"' not in content:
                cache_tags = '<head>\n<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">\n<meta http-equiv="Pragma" content="no-cache">\n<meta http-equiv="Expires" content="0">'
                new_content = content.replace('<head>', cache_tags)
                
                if new_content != content:
                    with open(html_file, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    fixed_count += 1
        except Exception as e:
            logger.warning(f"Error adding cache control to {html_file}: {e}")
    
    logger.info(f"Added cache control meta tags to {fixed_count} HTML files")


def remove_problematic_elements(report_dir: str) -> None:
    """Remove elements that might cause loading or display issues.
    
    Args:
        report_dir: Path to the Allure report directory.
    """
    html_files = glob.glob(os.path.join(report_dir, "**", "*.html"), recursive=True)
    fixed_count = 0
    
    for html_file in html_files:
        try:
            with open(html_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            modified = False
            
            # Remove meta refresh tags
            if '<meta http-equiv="refresh"' in content:
                new_content = re.sub(r'<meta\s+http-equiv=["\']refresh["\'][^>]*>', '', content)
                if new_content != content:
                    content = new_content
                    modified = True
            
            # Add CSS to ensure spinners don't stay visible
            if '</head>' in content and 'spinner-fix-styles' not in content:
                spinner_css = """<style id="spinner-fix-styles">
/* Ensure spinners don't stay visible indefinitely */
.spinner, .spinner_centered, [class*="spinner"] {
  animation-duration: 2s !important;
  animation-iteration-count: 1 !important;
}
</style>
</head>"""
                new_content = content.replace('</head>', spinner_css)
                if new_content != content:
                    content = new_content
                    modified = True
            
            if modified:
                with open(html_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_count += 1
        except Exception as e:
            logger.warning(f"Error fixing problematic elements in {html_file}: {e}")
    
    logger.info(f"Removed problematic elements from {fixed_count} HTML files")


def create_dummy_report(report_dir: str) -> None:
    """Create a dummy report when no test results are available.
    
    Args:
        report_dir: Path to create the dummy report.
    """
    os.makedirs(report_dir, exist_ok=True)
    today = get_current_date_formatted()
    
    # Get the template file path
    template_path = os.path.join(os.path.dirname(__file__), "templates", "dummy_report.html")
    
    # Check if template exists
    if not os.path.exists(template_path):
        logger.warning(f"Template file not found at {template_path}. Using fallback template.")
        dummy_html = f"""<!DOCTYPE html>
<html>
<head>
    <title>ALLURE REPORT {today}</title>
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    <style>
        body {{ font-family: Arial, sans-serif; padding: 20px; line-height: 1.6; }}
        .container {{ max-width: 800px; margin: 0 auto; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }}
        h1 {{ color: #333; }}
        .footer {{ margin-top: 30px; color: #666; font-size: 0.9em; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>ALLURE REPORT {today}</h1>
        <p>No test results available for this run.</p>
        <p>Please check the workflow logs for more information.</p>
        <div class="footer">Generated on: {datetime.now().strftime("%d-%m-%Y %H:%M:%S")}</div>
    </div>
</body>
</html>"""
    else:
        # Read the template file
        with open(template_path, 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        # Replace placeholders with values
        dummy_html = template_content.replace('{today}', today).replace('{timestamp}', datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
    
    # Write the HTML to index.html
    with open(os.path.join(report_dir, "index.html"), "w", encoding='utf-8') as f:
        f.write(dummy_html)
    
    # Create cache control files
    add_cache_control(report_dir)
    create_nojekyll_file(report_dir)
    
    logger.info("Created dummy report")


def main() -> int:
    """Entry point for the script.
    
    Processes command line arguments and applies appropriate customizations
    to the specified Allure report directory.
    
    Returns:
        int: Exit code (0 for success, 1 for error).
    """
    # Get report directory from command line or use default
    if len(sys.argv) > 1:
        report_dir = sys.argv[1]
    else:
        report_dir = "reports/allure-report"
    
    # Check if we should create a dummy report
    create_dummy = False
    if len(sys.argv) > 2 and sys.argv[2] == "--dummy":
        create_dummy = True
    
    logger.info(f"Processing Allure report in {report_dir}...")
    
    # Create dummy report if requested
    if create_dummy:
        create_dummy_report(report_dir)
        logger.info("Dummy report created successfully!")
        return 0
    
    # Ensure the directory exists
    if not os.path.isdir(report_dir):
        logger.error(f"Error: Directory {report_dir} does not exist!")
        return 1
    
    # Check if directory is empty
    if not os.listdir(report_dir):
        logger.warning(f"Warning: Directory {report_dir} is empty. Creating dummy report.")
        create_dummy_report(report_dir)
        return 0
    
    # Apply customizations (in appropriate order to minimize file reads/writes)
    try:
        # 1. Fix the date formats in various files
        fix_html_title_tags(report_dir)
        fix_js_date_formats(report_dir)
        fix_json_timestamps(report_dir)
        
        # 2. Remove problematic elements causing loading issues
        remove_problematic_elements(report_dir)
        
        # 3. Add cache control
        add_cache_control(report_dir)
        
        # 4. Add branch info
        add_branch_info(report_dir)
        
        # 5. Create .nojekyll file
        create_nojekyll_file(report_dir)
        
        logger.info("Allure report customization completed successfully!")
        return 0
    except Exception as e:
        logger.error(f"Error customizing Allure report: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 