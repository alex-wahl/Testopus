name: Run Selenium Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - api
          - internal
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean
      custom_flags:
        description: 'Additional test flags'
        required: false
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  pull-requests: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Setup job
  setup:
    runs-on: ubuntu-latest
    outputs:
      test_suite: ${{ github.event.inputs.test_suite || 'all' }}
      debug_mode: ${{ github.event.inputs.debug_mode || 'false' }}
      custom_flags: ${{ github.event.inputs.custom_flags }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Hatch
        run: pip install hatch
      
      - name: Install CI dependencies
        run: pip install -r ci/requirements.txt
      
      # Prepare directories
      - name: Prepare directories
        run: |
          mkdir -p reports/{allure-results,html,junit,screenshots,allure-report,allure-history}
          chmod -R 777 reports

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: testopus:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Move cache for performance
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: List test directories
        run: find tests -type f -name "test_*.py" | sort
  
  # Run tests
  test:
    needs: setup
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      # Run tests based on test suite
      - name: Run tests
        env:
          DEBUG_MODE: ${{ needs.setup.outputs.debug_mode == 'true' }}
          PYTHONPATH: /app
          DOCKER_ENV: true
          PYTEST_ADDOPTS: --verbose
          TZ: Europe/Berlin
        run: |
          case "${{ needs.setup.outputs.test_suite }}" in
            "ui")
              docker compose -f docker/docker-compose.yml run --rm testopus \
                --verbose -vv \
                --alluredir=/app/reports/allure-results \
                --html=/app/reports/html/report.html \
                --junitxml=/app/reports/junit/report_ui.xml \
                /app/tests/ui_tests/web ${{ needs.setup.outputs.custom_flags }}
              ;;
            "api")
              docker compose -f docker/docker-compose.yml run --rm testopus \
                --verbose -vv \
                --alluredir=/app/reports/allure-results \
                --html=/app/reports/html/report.html \
                --junitxml=/app/reports/junit/report_api.xml \
                /app/tests/api_tests ${{ needs.setup.outputs.custom_flags }}
              ;;
            "internal")
              docker compose -f docker/docker-compose.yml run --rm testopus \
                --verbose -vv \
                --alluredir=/app/reports/allure-results \
                --html=/app/reports/html/report.html \
                --junitxml=/app/reports/junit/report_internal.xml \
                /app/tests/internal_tests ${{ needs.setup.outputs.custom_flags }}
              ;;
            *)
              docker compose -f docker/docker-compose.yml run --rm testopus \
                --verbose -vv \
                --alluredir=/app/reports/allure-results \
                --html=/app/reports/html/report.html \
                --junitxml=/app/reports/junit/report_all.xml \
                /app/tests ${{ needs.setup.outputs.custom_flags }}
              ;;
          esac
      
      # Clean up containers
      - name: Clean up containers
        if: always()
        run: docker compose -f docker/docker-compose.yml down --remove-orphans
      
      # Verify test artifacts
      - name: Verify test artifacts
        if: always()
        run: |
          echo "=== Allure results ==="
          ls -la reports/allure-results/ || echo "No allure-results directory"
          echo "=== HTML report ==="
          ls -la reports/html/ || echo "No html directory"
          echo "=== JUnit reports ==="
          ls -la reports/junit/ || echo "No junit directory"
          echo "=== Screenshots ==="
          ls -la reports/screenshots/ || echo "No screenshots directory"
      
      # Create artifacts directory if it doesn't exist
      - name: Create artifacts directory
        if: always()
        run: mkdir -p reports/{allure-results,html,junit,screenshots,allure-report,allure-history}
      
      # Upload test results as artifacts
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: reports/
          retention-days: 1  # Short retention as these will be processed by report job
  
  # Generate reports
  report:
    needs: [setup, test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install CI dependencies
        run: pip install -r ci/requirements.txt
      
      # Download test results
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: reports/
      
      # Create empty history if needed
      - name: Create empty history if needed
        run: |
          mkdir -p reports/allure-history/history
          if [ ! -d "reports/allure-history" ] || [ -z "$(ls -A reports/allure-history)" ]; then
            echo "Creating empty history placeholder files"
            echo "{}" > reports/allure-history/history.json
            echo "{}" > reports/allure-history/categories-trend.json
            echo "{}" > reports/allure-history/duration-trend.json
            echo "{}" > reports/allure-history/retries-trend.json
            echo "{}" > reports/allure-history/history-trend.json
          fi
      
      # Download previous test history
      - name: Download previous test history
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: allure-history
          path: reports/allure-history
      
      # Install allure-commandline
      - name: Set up Allure
        run: |
          wget -O allure-commandline.zip https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.zip
          unzip allure-commandline.zip
      
      # Generate Allure report
      - name: Generate Allure Report
        run: |
          # Copy history to results directory
          if [ -d "reports/allure-history" ] && [ "$(ls -A reports/allure-history)" ]; then
            echo "Copying previous history to results"
            mkdir -p reports/allure-results/history
            cp -r reports/allure-history/* reports/allure-results/history/ || true
          fi
          
          # Generate the report
          ./allure-2.24.0/bin/allure generate reports/allure-results -o reports/allure-report --clean
          
          # Customize the report
          python3 ci/scripts/customize_allure_report.py --history
          
          # Save history for future runs
          mkdir -p reports/allure-history
          if [ -d "reports/allure-report/history" ]; then
            echo "Saving history for future runs"
            cp -r reports/allure-report/history/* reports/allure-history/ || true
          fi
        env:
          ALLURE_REPORT_DIR: reports/allure-report
          ALLURE_BRANCH: ${{ github.head_ref || github.ref_name }}
          ALLURE_PRESERVE_HISTORY: true
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
      
      # Upload test history
      - name: Upload test history
        uses: actions/upload-artifact@v4
        with:
          name: allure-history
          path: reports/allure-history/
          retention-days: 90
      
      # Upload test reports
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/html/
            reports/junit/
            reports/screenshots/
            reports/allure-results/
            reports/allure-report/
          retention-days: 90
          
      # Publish test results
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: reports/junit/report*.xml
          check_name: Test Results
  
  # Deploy to GitHub Pages
  deploy:
    needs: report
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      # Download report
      - name: Download report
        uses: actions/download-artifact@v4
        with:
          name: test-reports
          path: reports/
      
      # Upload GitHub Pages artifact
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/allure-report
          retention-days: 90
      
      # Deploy to reporting branch
      - name: Deploy to reporting branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/allure-report
          publish_branch: reporting
          force_orphan: true
          enable_jekyll: false
          keep_files: false
          cname: ${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "docs: update Allure report [skip ci]"
      
      # Comment on PR with report links
      - name: Comment PR with Report Links
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            let pagesUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}`;
            
            const comment = `### Test Results
            
            #### Report Links:
            - [Download Test Reports](${artifactUrl})
            - [View Allure Report](${pagesUrl}) (updated with latest results)
            
            *Tests run by GitHub Actions workflow*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });