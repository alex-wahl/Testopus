name: Run Selenium Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - ui
          - api
          - internal
      debug_mode:
        description: 'Enable debug output'
        required: false
        default: false
        type: boolean
      custom_flags:
        description: 'Additional test flags'
        required: false
        type: string

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  checks: write
  pull-requests: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install Hatch
        run: pip install hatch
      
      - name: Install CI dependencies
        run: pip install -r ci/requirements.txt
      
      # Make sure reports directories exist
      - name: Prepare directories
        run: |
          mkdir -p reports/allure-results
          mkdir -p reports/html
          mkdir -p reports/junit
          mkdir -p reports/screenshots
          mkdir -p reports/allure-report
          chmod -R 777 reports
          echo "Listing test directories:"
          find tests -type f -name "test_*.py" | sort
      
      # Setup Docker Buildx for improved caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Prepare cache directories
      - name: Prepare cache directories
        run: |
          mkdir -p /tmp/.buildx-cache
          mkdir -p /tmp/.buildx-cache-new
      
      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      # Build Docker image directly without registry login
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: false
          load: true
          tags: testopus:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      # Temp fix for actions/cache performance
      # https://github.com/docker/build-push-action/issues/252
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Run tests
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "ui" ]; then
            docker compose -f docker/docker-compose.yml run --rm testopus --verbose -vv --alluredir=/app/reports/allure-results --html=/app/reports/html/report.html --junitxml=/app/reports/junit/report_ui.xml /app/tests/ui_tests/web ${{ github.event.inputs.custom_flags }}
          elif [ "${{ github.event.inputs.test_suite }}" = "api" ]; then
            docker compose -f docker/docker-compose.yml run --rm testopus --verbose -vv --alluredir=/app/reports/allure-results --html=/app/reports/html/report.html --junitxml=/app/reports/junit/report_api.xml /app/tests/api_tests ${{ github.event.inputs.custom_flags }}
          elif [ "${{ github.event.inputs.test_suite }}" = "internal" ]; then
            docker compose -f docker/docker-compose.yml run --rm testopus --verbose -vv --alluredir=/app/reports/allure-results --html=/app/reports/html/report.html --junitxml=/app/reports/junit/report_internal.xml /app/tests/internal_tests ${{ github.event.inputs.custom_flags }}
          else
            docker compose -f docker/docker-compose.yml run --rm testopus --verbose -vv --alluredir=/app/reports/allure-results --html=/app/reports/html/report.html --junitxml=/app/reports/junit/report_all.xml /app/tests ${{ github.event.inputs.custom_flags }}
          fi
        env:
          DEBUG_MODE: ${{ github.event.inputs.debug_mode == 'true' }}
          PYTHONPATH: /app
          DOCKER_ENV: true
          PYTEST_ADDOPTS: --verbose
          TZ: Europe/Berlin
      
      - name: Clean up containers
        if: always()
        run: docker compose -f docker/docker-compose.yml down --remove-orphans
      
      # List report files to verify they exist
      - name: List reports directory
        if: always()
        run: |
          echo "=== Workspace contents ==="
          ls -la
          echo "=== Reports directory ==="
          ls -la reports/ || echo "No reports directory"
          echo "=== Allure results ==="
          ls -la reports/allure-results/ || echo "No allure-results directory"
          echo "=== HTML report ==="
          ls -la reports/html/ || echo "No html directory"
          echo "=== JUnit reports ==="
          ls -la reports/junit/ || echo "No junit directory"
          echo "=== Screenshots ==="
          ls -la reports/screenshots/ || echo "No screenshots directory"
      
      # Install allure-commandline for report generation
      - name: Set up Allure
        if: always()
        run: |
          wget -O allure-commandline.zip https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.24.0/allure-commandline-2.24.0.zip
          unzip allure-commandline.zip
      
      # Generate Allure report
      - name: Generate Allure Report
        if: always()
        run: |
          if [ -d "reports/allure-results" ] && [ "$(ls -A reports/allure-results)" ]; then
            # Set timezone to Berlin
            export TZ=Europe/Berlin
            
            # Generate the report
            ./allure-2.24.0/bin/allure generate reports/allure-results -o reports/allure-report --clean
            
            # Check if report generation was successful
            if [ $? -ne 0 ]; then
              echo "::warning::Allure report generation failed, creating dummy report"
              python3 ci/scripts/customize_allure_report.py --dummy
            else
              # Customize the report using our Python script
              python3 ci/scripts/customize_allure_report.py
            fi
          else
            echo "No Allure results found, creating a dummy report"
            python3 ci/scripts/customize_allure_report.py --dummy
          fi
        env:
          ALLURE_REPORT_DIR: reports/allure-report
          ALLURE_CREATE_DUMMY: false
          ALLURE_BRANCH: ${{ github.head_ref || github.ref_name }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
      
      # Upload test reports as artifacts
      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            reports/html/
            reports/junit/
            reports/screenshots/
            reports/allure-results/
            reports/allure-report/
            
      # Optional: Publish test results
      - name: Publish Test Results
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: reports/junit/report*.xml
          check_name: Test Results
          
      # Upload artifact for deployment job
      - name: Upload GitHub Pages artifact
        if: always()
        uses: actions/upload-pages-artifact@v3
        with:
          path: reports/allure-report
          retention-days: 30
      
      # For direct branch upload - GitHub Pages is configured to use the 'reporting' branch
      - name: Deploy to reporting branch
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./reports/allure-report
          publish_branch: reporting
          force_orphan: true
          enable_jekyll: false
          keep_files: false
          cname: ${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
          user_name: "github-actions[bot]"
          user_email: "github-actions[bot]@users.noreply.github.com"
          commit_message: "docs: update Allure report [skip ci]"

      # Comment on PR with Report Links
      - name: Comment PR with Report Links
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const artifactUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            let pagesUrl = `https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}`;
            
            const comment = `### Test Results
            
            #### Report Links:
            - [Download Test Reports](${artifactUrl})
            - [View Allure Report](${pagesUrl}) (updated with latest results)
            
            *Tests run by GitHub Actions workflow*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });